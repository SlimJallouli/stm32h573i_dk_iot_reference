
STM32H573i_DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002098  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022e4  080022e4  000032e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f4  080022f4  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080022f4  080022f4  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080022f4  080022f4  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000032f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022f8  080022f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080022fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004028  20000028  08002324  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004050  08002324  00004050  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000960d  00000000  00000000  0000405e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001750  00000000  00000000  0000d66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000558  00000000  00000000  0000f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003097d  00000000  00000000  0000fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081dd  00000000  00000000  000403d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134666  00000000  00000000  000485b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017cc18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  0017cc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0017e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	080022cc 	.word	0x080022cc

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	080022cc 	.word	0x080022cc

0800028c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f958 	bl	8000546 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000296:	f001 fae3 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 800029a:	4602      	mov	r2, r0
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <HAL_Init+0x44>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	f003 030f 	and.w	r3, r3, #15
 80002a4:	490b      	ldr	r1, [pc, #44]	@ (80002d4 <HAL_Init+0x48>)
 80002a6:	5ccb      	ldrb	r3, [r1, r3]
 80002a8:	fa22 f303 	lsr.w	r3, r2, r3
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <HAL_Init+0x4c>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002b0:	2004      	movs	r0, #4
 80002b2:	f000 f98f 	bl	80005d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002b6:	200f      	movs	r0, #15
 80002b8:	f000 f810 	bl	80002dc <HAL_InitTick>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e002      	b.n	80002cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80002c6:	f001 fedb 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	44020c00 	.word	0x44020c00
 80002d4:	080022e4 	.word	0x080022e4
 80002d8:	20000024 	.word	0x20000024

080002dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80002e8:	4b33      	ldr	r3, [pc, #204]	@ (80003b8 <HAL_InitTick+0xdc>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d101      	bne.n	80002f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80002f0:	2301      	movs	r3, #1
 80002f2:	e05c      	b.n	80003ae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80002f4:	4b31      	ldr	r3, [pc, #196]	@ (80003bc <HAL_InitTick+0xe0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	d10c      	bne.n	800031a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000300:	4b2f      	ldr	r3, [pc, #188]	@ (80003c0 <HAL_InitTick+0xe4>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <HAL_InitTick+0xdc>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4619      	mov	r1, r3
 800030a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800030e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000312:	fbb2 f3f3 	udiv	r3, r2, r3
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e037      	b.n	800038a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800031a:	f000 f9b3 	bl	8000684 <HAL_SYSTICK_GetCLKSourceConfig>
 800031e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	2b02      	cmp	r3, #2
 8000324:	d023      	beq.n	800036e <HAL_InitTick+0x92>
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d82d      	bhi.n	8000388 <HAL_InitTick+0xac>
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d003      	beq.n	800033a <HAL_InitTick+0x5e>
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d00d      	beq.n	8000354 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000338:	e026      	b.n	8000388 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800033a:	4b21      	ldr	r3, [pc, #132]	@ (80003c0 <HAL_InitTick+0xe4>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <HAL_InitTick+0xdc>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	4619      	mov	r1, r3
 8000344:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000348:	fbb3 f3f1 	udiv	r3, r3, r1
 800034c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000350:	60fb      	str	r3, [r7, #12]
        break;
 8000352:	e01a      	b.n	800038a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <HAL_InitTick+0xdc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800035e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000362:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
        break;
 800036c:	e00d      	b.n	800038a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <HAL_InitTick+0xdc>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000378:	fbb3 f3f2 	udiv	r3, r3, r2
 800037c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	60fb      	str	r3, [r7, #12]
        break;
 8000386:	e000      	b.n	800038a <HAL_InitTick+0xae>
        break;
 8000388:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800038a:	68f8      	ldr	r0, [r7, #12]
 800038c:	f000 f900 	bl	8000590 <HAL_SYSTICK_Config>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000396:	2301      	movs	r3, #1
 8000398:	e009      	b.n	80003ae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800039a:	2200      	movs	r2, #0
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	f04f 30ff 	mov.w	r0, #4294967295
 80003a2:	f000 f8db 	bl	800055c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80003a6:	4a07      	ldr	r2, [pc, #28]	@ (80003c4 <HAL_InitTick+0xe8>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000004 	.word	0x20000004
 80003bc:	e000e010 	.word	0xe000e010
 80003c0:	20000024 	.word	0x20000024
 80003c4:	20000000 	.word	0x20000000

080003c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <HAL_IncTick+0x20>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <HAL_IncTick+0x24>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4413      	add	r3, r2
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <HAL_IncTick+0x24>)
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000004 	.word	0x20000004
 80003ec:	20000044 	.word	0x20000044

080003f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  return uwTick;
 80003f4:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <HAL_GetTick+0x14>)
 80003f6:	681b      	ldr	r3, [r3, #0]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000044 	.word	0x20000044

08000408 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <HAL_SuspendTick+0x1c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a04      	ldr	r2, [pc, #16]	@ (8000424 <HAL_SuspendTick+0x1c>)
 8000412:	f023 0302 	bic.w	r3, r3, #2
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e010 	.word	0xe000e010

08000428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <__NVIC_SetPriorityGrouping+0x44>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000444:	4013      	ands	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800045a:	4a04      	ldr	r2, [pc, #16]	@ (800046c <__NVIC_SetPriorityGrouping+0x44>)
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	60d3      	str	r3, [r2, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000474:	4b04      	ldr	r3, [pc, #16]	@ (8000488 <__NVIC_GetPriorityGrouping+0x18>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	0a1b      	lsrs	r3, r3, #8
 800047a:	f003 0307 	and.w	r3, r3, #7
}
 800047e:	4618      	mov	r0, r3
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	6039      	str	r1, [r7, #0]
 8000496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800049c:	2b00      	cmp	r3, #0
 800049e:	db0a      	blt.n	80004b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	490c      	ldr	r1, [pc, #48]	@ (80004d8 <__NVIC_SetPriority+0x4c>)
 80004a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004aa:	0112      	lsls	r2, r2, #4
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	440b      	add	r3, r1
 80004b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004b4:	e00a      	b.n	80004cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4908      	ldr	r1, [pc, #32]	@ (80004dc <__NVIC_SetPriority+0x50>)
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	f003 030f 	and.w	r3, r3, #15
 80004c2:	3b04      	subs	r3, #4
 80004c4:	0112      	lsls	r2, r2, #4
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	440b      	add	r3, r1
 80004ca:	761a      	strb	r2, [r3, #24]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000e100 	.word	0xe000e100
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b089      	sub	sp, #36	@ 0x24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	f1c3 0307 	rsb	r3, r3, #7
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	bf28      	it	cs
 80004fe:	2304      	movcs	r3, #4
 8000500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3304      	adds	r3, #4
 8000506:	2b06      	cmp	r3, #6
 8000508:	d902      	bls.n	8000510 <NVIC_EncodePriority+0x30>
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	3b03      	subs	r3, #3
 800050e:	e000      	b.n	8000512 <NVIC_EncodePriority+0x32>
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000514:	f04f 32ff 	mov.w	r2, #4294967295
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	43da      	mvns	r2, r3
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	401a      	ands	r2, r3
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000528:	f04f 31ff 	mov.w	r1, #4294967295
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43d9      	mvns	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000538:	4313      	orrs	r3, r2
         );
}
 800053a:	4618      	mov	r0, r3
 800053c:	3724      	adds	r7, #36	@ 0x24
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff ff6a 	bl	8000428 <__NVIC_SetPriorityGrouping>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800056a:	f7ff ff81 	bl	8000470 <__NVIC_GetPriorityGrouping>
 800056e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	6978      	ldr	r0, [r7, #20]
 8000576:	f7ff ffb3 	bl	80004e0 <NVIC_EncodePriority>
 800057a:	4602      	mov	r2, r0
 800057c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff82 	bl	800048c <__NVIC_SetPriority>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005a0:	d301      	bcc.n	80005a6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00d      	b.n	80005c2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_SYSTICK_Config+0x40>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_SYSTICK_Config+0x40>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_SYSTICK_Config+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <HAL_SYSTICK_Config+0x40>)
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d844      	bhi.n	800066c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80005e2:	a201      	add	r2, pc, #4	@ (adr r2, 80005e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	0800060b 	.word	0x0800060b
 80005ec:	08000629 	.word	0x08000629
 80005f0:	0800064b 	.word	0x0800064b
 80005f4:	0800066d 	.word	0x0800066d
 80005f8:	080005fd 	.word	0x080005fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6013      	str	r3, [r2, #0]
      break;
 8000608:	e031      	b.n	800066e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000610:	f023 0304 	bic.w	r3, r3, #4
 8000614:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800061c:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800061e:	f023 030c 	bic.w	r3, r3, #12
 8000622:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000626:	e022      	b.n	800066e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800062e:	f023 0304 	bic.w	r3, r3, #4
 8000632:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000636:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800063a:	f023 030c 	bic.w	r3, r3, #12
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000648:	e011      	b.n	800066e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000650:	f023 0304 	bic.w	r3, r3, #4
 8000654:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800065c:	f023 030c 	bic.w	r3, r3, #12
 8000660:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800066a:	e000      	b.n	800066e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800066c:	bf00      	nop
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	44020c00 	.word	0x44020c00

08000684 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000696:	2304      	movs	r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e01e      	b.n	80006da <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800069e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80006a2:	f003 030c 	and.w	r3, r3, #12
 80006a6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	d00f      	beq.n	80006ce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d80f      	bhi.n	80006d4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d003      	beq.n	80006c8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80006c0:	e008      	b.n	80006d4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
        break;
 80006c6:	e008      	b.n	80006da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
        break;
 80006cc:	e005      	b.n	80006da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80006ce:	2302      	movs	r3, #2
 80006d0:	607b      	str	r3, [r7, #4]
        break;
 80006d2:	e002      	b.n	80006da <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
        break;
 80006d8:	bf00      	nop
    }
  }
  return systick_source;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e010 	.word	0xe000e010
 80006ec:	44020c00 	.word	0x44020c00

080006f0 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <HAL_FLASH_Program+0xd4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000702:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000706:	f000 f8ad 	bl	8000864 <FLASH_WaitForLastOperation>
 800070a:	4603      	mov	r3, r0
 800070c:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d152      	bne.n	80007ba <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8000714:	4a2b      	ldr	r2, [pc, #172]	@ (80007c4 <HAL_FLASH_Program+0xd4>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800071a:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <HAL_FLASH_Program+0xd8>)
 800071c:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000724:	2b02      	cmp	r3, #2
 8000726:	d104      	bne.n	8000732 <HAL_FLASH_Program+0x42>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	68b8      	ldr	r0, [r7, #8]
 800072c:	f000 f8e8 	bl	8000900 <FLASH_Program_QuadWord>
 8000730:	e026      	b.n	8000780 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4a25      	ldr	r2, [pc, #148]	@ (80007cc <HAL_FLASH_Program+0xdc>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d003      	beq.n	8000742 <HAL_FLASH_Program+0x52>
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4a24      	ldr	r2, [pc, #144]	@ (80007d0 <HAL_FLASH_Program+0xe0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d104      	bne.n	800074c <HAL_FLASH_Program+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	68b8      	ldr	r0, [r7, #8]
 8000746:	f000 f917 	bl	8000978 <FLASH_Program_QuadWord_OBK>
 800074a:	e019      	b.n	8000780 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000752:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <HAL_FLASH_Program+0xe4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d104      	bne.n	8000762 <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	68b8      	ldr	r0, [r7, #8]
 800075c:	f000 f958 	bl	8000a10 <FLASH_Program_HalfWord>
 8000760:	e00e      	b.n	8000780 <HAL_FLASH_Program+0x90>
    }
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_WORD_EDATA)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <HAL_FLASH_Program+0xe8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d104      	bne.n	8000778 <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_Word(FlashAddress, DataAddress);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 f967 	bl	8000a44 <FLASH_Program_Word>
 8000776:	e003      	b.n	8000780 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	68b8      	ldr	r0, [r7, #8]
 800077c:	f000 f948 	bl	8000a10 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f000 f86e 	bl	8000864 <FLASH_WaitForLastOperation>
 8000788:	4603      	mov	r3, r0
 800078a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 8000796:	f023 0304 	bic.w	r3, r3, #4
 800079a:	43db      	mvns	r3, r3
 800079c:	401a      	ands	r2, r3
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_FLASH_Program+0xe0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d107      	bne.n	80007ba <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_FLASH_Program+0xec>)
 80007ac:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f023 0204 	bic.w	r2, r3, #4
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* return status */
  return status;
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000008 	.word	0x20000008
 80007c8:	40022028 	.word	0x40022028
 80007cc:	10000002 	.word	0x10000002
 80007d0:	10000006 	.word	0x10000006
 80007d4:	40000002 	.word	0x40000002
 80007d8:	60000002 	.word	0x60000002
 80007dc:	40022040 	.word	0x40022040

080007e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_FLASH_Unlock+0x40>)
 80007ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00d      	beq.n	8000812 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_FLASH_Unlock+0x40>)
 80007f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <HAL_FLASH_Unlock+0x44>)
 80007fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_FLASH_Unlock+0x40>)
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_FLASH_Unlock+0x48>)
 8000800:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <HAL_FLASH_Unlock+0x40>)
 8000804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8000812:	79fb      	ldrb	r3, [r7, #7]
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40022000 	.word	0x40022000
 8000824:	45670123 	.word	0x45670123
 8000828:	cdef89ab 	.word	0xcdef89ab

0800082c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_FLASH_Lock+0x34>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_FLASH_Lock+0x34>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_FLASH_Lock+0x34>)
 8000844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8000852:	79fb      	ldrb	r3, [r7, #7]
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40022000 	.word	0x40022000

08000864 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff fdc0 	bl	80003f0 <HAL_GetTick>
 8000870:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <FLASH_WaitForLastOperation+0x90>)
 8000874:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8000876:	e010      	b.n	800089a <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087e:	d00c      	beq.n	800089a <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000880:	f7ff fdb6 	bl	80003f0 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	d302      	bcc.n	8000896 <FLASH_WaitForLastOperation+0x32>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8000896:	2303      	movs	r3, #3
 8000898:	e027      	b.n	80008ea <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 030b 	and.w	r3, r3, #11
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1e8      	bne.n	8000878 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <FLASH_WaitForLastOperation+0x94>)
 80008a8:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 80008b2:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00c      	beq.n	80008d4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <FLASH_WaitForLastOperation+0x98>)
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <FLASH_WaitForLastOperation+0x98>)
 80008c4:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e00a      	b.n	80008ea <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008e6:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022020 	.word	0x40022020
 80008f8:	40022030 	.word	0x40022030
 80008fc:	20000008 	.word	0x20000008

08000900 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8000900:	b480      	push	{r7}
 8000902:	b08b      	sub	sp, #44	@ 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <FLASH_Program_QuadWord+0x74>)
 800091a:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f043 0202 	orr.w	r2, r3, #2
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000928:	f3ef 8310 	mrs	r3, PRIMASK
 800092c:	613b      	str	r3, [r7, #16]
  return(result);
 800092e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	3304      	adds	r3, #4
 8000942:	623b      	str	r3, [r7, #32]
    src_addr++;
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	3304      	adds	r3, #4
 8000948:	61fb      	str	r3, [r7, #28]
    index--;
 800094a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800094e:	3b01      	subs	r3, #1
 8000950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8000954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1ec      	bne.n	8000936 <FLASH_Program_QuadWord+0x36>
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f383 8810 	msr	PRIMASK, r3
}
 8000966:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000968:	bf00      	nop
 800096a:	372c      	adds	r7, #44	@ 0x2c
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40022028 	.word	0x40022028

08000978 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8000978:	b480      	push	{r7}
 800097a:	b08b      	sub	sp, #44	@ 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <FLASH_Program_QuadWord_OBK+0x8c>)
 8000992:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <FLASH_Program_QuadWord_OBK+0x90>)
 8000996:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0202 	orr.w	r2, r3, #2
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <FLASH_Program_QuadWord_OBK+0x94>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	431a      	orrs	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80009b6:	f3ef 8310 	mrs	r3, PRIMASK
 80009ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80009bc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80009be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	3304      	adds	r3, #4
 80009d0:	623b      	str	r3, [r7, #32]
    src_addr++;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	61fb      	str	r3, [r7, #28]
    index--;
 80009d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009dc:	3b01      	subs	r3, #1
 80009de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 80009e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1ec      	bne.n	80009c4 <FLASH_Program_QuadWord_OBK+0x4c>
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	f383 8810 	msr	PRIMASK, r3
}
 80009f4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80009f6:	bf00      	nop
 80009f8:	372c      	adds	r7, #44	@ 0x2c
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40022028 	.word	0x40022028
 8000a08:	40022040 	.word	0x40022040
 8000a0c:	20000008 	.word	0x20000008

08000a10 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <FLASH_Program_HalfWord+0x30>)
 8000a1c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f043 0202 	orr.w	r2, r3, #2
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	8812      	ldrh	r2, [r2, #0]
 8000a30:	b292      	uxth	r2, r2
 8000a32:	801a      	strh	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	40022028 	.word	0x40022028

08000a44 <FLASH_Program_Word>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t FlashAddress, uint32_t DataAddress)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <FLASH_Program_Word+0x30>)
 8000a50:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f043 0202 	orr.w	r2, r3, #2
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]

    *(__IO uint32_t *)FlashAddress = *(__IO uint32_t *)DataAddress;
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40022028 	.word	0x40022028

08000a78 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a82:	4b3a      	ldr	r3, [pc, #232]	@ (8000b6c <HAL_FLASHEx_Erase+0xf4>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d101      	bne.n	8000a8e <HAL_FLASHEx_Erase+0x16>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e06a      	b.n	8000b64 <HAL_FLASHEx_Erase+0xec>
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <HAL_FLASHEx_Erase+0xf4>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <HAL_FLASHEx_Erase+0xf4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9e:	f7ff fee1 	bl	8000864 <FLASH_WaitForLastOperation>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d157      	bne.n	8000b5c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8000b6c <HAL_FLASHEx_Erase+0xf4>)
 8000ab2:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <HAL_FLASHEx_Erase+0xf8>)
 8000ab6:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ac0:	f248 0208 	movw	r2, #32776	@ 0x8008
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d10b      	bne.n	8000ae0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f853 	bl	8000b78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad6:	f7ff fec5 	bl	8000864 <FLASH_WaitForLastOperation>
 8000ada:	4603      	mov	r3, r0
 8000adc:	75fb      	strb	r3, [r7, #23]
 8000ade:	e033      	b.n	8000b48 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <HAL_FLASHEx_Erase+0xfc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d108      	bne.n	8000afc <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8000aea:	f000 f8b5 	bl	8000c58 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af2:	f7ff feb7 	bl	8000864 <FLASH_WaitForLastOperation>
 8000af6:	4603      	mov	r3, r0
 8000af8:	75fb      	strb	r3, [r7, #23]
 8000afa:	e025      	b.n	8000b48 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	e015      	b.n	8000b38 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	4619      	mov	r1, r3
 8000b12:	6938      	ldr	r0, [r7, #16]
 8000b14:	f000 f868 	bl	8000be8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1c:	f7ff fea2 	bl	8000864 <FLASH_WaitForLastOperation>
 8000b20:	4603      	mov	r3, r0
 8000b22:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	601a      	str	r2, [r3, #0]
          break;
 8000b30:	e00a      	b.n	8000b48 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	3301      	adds	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3e1      	bcc.n	8000b0c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_FLASHEx_Erase+0xf4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

  return status;
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	40022028 	.word	0x40022028
 8000b74:	80000008 	.word	0x80000008

08000b78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <FLASH_MassErase+0x6c>)
 8000b82:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d108      	bne.n	8000ba0 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8000b9e:	e01b      	b.n	8000bd8 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000bb2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000bb6:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d007      	beq.n	8000bd8 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40022028 	.word	0x40022028

08000be8 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <FLASH_Erase_Sector+0x6c>)
 8000bf4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d011      	beq.n	8000c24 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c08:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	019b      	lsls	r3, r3, #6
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8000c22:	e010      	b.n	8000c46 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	019b      	lsls	r3, r3, #6
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c3e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40022028 	.word	0x40022028

08000c58 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <FLASH_OBKErase+0x24>)
 8000c60:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f043 0208 	orr.w	r2, r3, #8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40022040 	.word	0x40022040

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f000 bc28 	b.w	80014e4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c94:	4b94      	ldr	r3, [pc, #592]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 0318 	and.w	r3, r3, #24
 8000c9c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000c9e:	4b92      	ldr	r3, [pc, #584]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d05b      	beq.n	8000d6c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d005      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x46>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	2b18      	cmp	r3, #24
 8000cbe:	d114      	bne.n	8000cea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d111      	bne.n	8000cea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f000 bc08 	b.w	80014e4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000cd4:	4b84      	ldr	r3, [pc, #528]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	4981      	ldr	r1, [pc, #516]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000ce8:	e040      	b.n	8000d6c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d023      	beq.n	8000d3a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fb77 	bl	80003f0 <HAL_GetTick>
 8000d02:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000d06:	f7ff fb73 	bl	80003f0 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e3e5      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000d18:	4b73      	ldr	r3, [pc, #460]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f0      	beq.n	8000d06 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000d24:	4b70      	ldr	r3, [pc, #448]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	496d      	ldr	r1, [pc, #436]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	618b      	str	r3, [r1, #24]
 8000d38:	e018      	b.n	8000d6c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d46:	f7ff fb53 	bl	80003f0 <HAL_GetTick>
 8000d4a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fb4f 	bl	80003f0 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e3c1      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000d60:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f0      	bne.n	8000d4e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a0 	beq.w	8000eba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d005      	beq.n	8000d8c <HAL_RCC_OscConfig+0x10c>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b18      	cmp	r3, #24
 8000d84:	d109      	bne.n	8000d9a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d106      	bne.n	8000d9a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f040 8092 	bne.w	8000eba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e3a4      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da2:	d106      	bne.n	8000db2 <HAL_RCC_OscConfig+0x132>
 8000da4:	4b50      	ldr	r3, [pc, #320]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e058      	b.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d112      	bne.n	8000de0 <HAL_RCC_OscConfig+0x160>
 8000dba:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b48      	ldr	r3, [pc, #288]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a47      	ldr	r2, [pc, #284]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b45      	ldr	r3, [pc, #276]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a44      	ldr	r2, [pc, #272]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e041      	b.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000de8:	d112      	bne.n	8000e10 <HAL_RCC_OscConfig+0x190>
 8000dea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000dfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a38      	ldr	r2, [pc, #224]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e029      	b.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8000e18:	d112      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1c0>
 8000e1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e011      	b.n	8000e64 <HAL_RCC_OscConfig+0x1e4>
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a25      	ldr	r2, [pc, #148]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e5e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fac0 	bl	80003f0 <HAL_GetTick>
 8000e70:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fabc 	bl	80003f0 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	@ 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e32e      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x1f4>
 8000e92:	e012      	b.n	8000eba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e94:	f7ff faac 	bl	80003f0 <HAL_GetTick>
 8000e98:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff faa8 	bl	80003f0 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e31a      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_RCC_OscConfig+0x268>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 809a 	beq.w	8000ffc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <HAL_RCC_OscConfig+0x25a>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	2b18      	cmp	r3, #24
 8000ed2:	d149      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d146      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e2fe      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
 8000ee6:	bf00      	nop
 8000ee8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8000ef2:	4b9a      	ldr	r3, [pc, #616]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0218 	and.w	r2, r3, #24
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d014      	beq.n	8000f2c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000f02:	4b96      	ldr	r3, [pc, #600]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 0218 	bic.w	r2, r3, #24
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	4993      	ldr	r1, [pc, #588]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8000f14:	f000 fdd0 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f18:	4b91      	ldr	r3, [pc, #580]	@ (8001160 <HAL_RCC_OscConfig+0x4e0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f9dd 	bl	80002dc <HAL_InitTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e2db      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fa60 	bl	80003f0 <HAL_GetTick>
 8000f30:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fa5c 	bl	80003f0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e2ce      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f46:	4b85      	ldr	r3, [pc, #532]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8000f52:	4b82      	ldr	r3, [pc, #520]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	041b      	lsls	r3, r3, #16
 8000f60:	497e      	ldr	r1, [pc, #504]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000f66:	e049      	b.n	8000ffc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d02c      	beq.n	8000fca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000f70:	4b7a      	ldr	r3, [pc, #488]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 0218 	bic.w	r2, r3, #24
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4977      	ldr	r1, [pc, #476]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8000f82:	4b76      	ldr	r3, [pc, #472]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a75      	ldr	r2, [pc, #468]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fa2f 	bl	80003f0 <HAL_GetTick>
 8000f92:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000f96:	f7ff fa2b 	bl	80003f0 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e29d      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8000fb4:	4b69      	ldr	r3, [pc, #420]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	4966      	ldr	r1, [pc, #408]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	610b      	str	r3, [r1, #16]
 8000fc8:	e018      	b.n	8000ffc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fca:	4b64      	ldr	r3, [pc, #400]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a63      	ldr	r2, [pc, #396]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fa0b 	bl	80003f0 <HAL_GetTick>
 8000fda:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fa07 	bl	80003f0 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e279      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b00      	cmp	r3, #0
 8001006:	d03c      	beq.n	8001082 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01c      	beq.n	800104a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001010:	4b52      	ldr	r3, [pc, #328]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001016:	4a51      	ldr	r2, [pc, #324]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800101c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001020:	f7ff f9e6 	bl	80003f0 <HAL_GetTick>
 8001024:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001028:	f7ff f9e2 	bl	80003f0 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e254      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800103a:	4b48      	ldr	r3, [pc, #288]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 800103c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0ef      	beq.n	8001028 <HAL_RCC_OscConfig+0x3a8>
 8001048:	e01b      	b.n	8001082 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104a:	4b44      	ldr	r3, [pc, #272]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 800104c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001050:	4a42      	ldr	r2, [pc, #264]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105a:	f7ff f9c9 	bl	80003f0 <HAL_GetTick>
 800105e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001062:	f7ff f9c5 	bl	80003f0 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e237      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001074:	4b39      	ldr	r3, [pc, #228]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800107a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1ef      	bne.n	8001062 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80d2 	beq.w	8001234 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001090:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <HAL_RCC_OscConfig+0x4e4>)
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d118      	bne.n	80010ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <HAL_RCC_OscConfig+0x4e4>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	4a30      	ldr	r2, [pc, #192]	@ (8001164 <HAL_RCC_OscConfig+0x4e4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a8:	f7ff f9a2 	bl	80003f0 <HAL_GetTick>
 80010ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b0:	f7ff f99e 	bl	80003f0 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e210      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <HAL_RCC_OscConfig+0x4e4>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_RCC_OscConfig+0x468>
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010dc:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010e6:	e074      	b.n	80011d2 <HAL_RCC_OscConfig+0x552>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d118      	bne.n	8001122 <HAL_RCC_OscConfig+0x4a2>
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001106:	4a15      	ldr	r2, [pc, #84]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800110c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001116:	4a11      	ldr	r2, [pc, #68]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001120:	e057      	b.n	80011d2 <HAL_RCC_OscConfig+0x552>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b05      	cmp	r3, #5
 8001128:	d11e      	bne.n	8001168 <HAL_RCC_OscConfig+0x4e8>
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 800112c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 800113c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001146:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 800114c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001150:	4a02      	ldr	r2, [pc, #8]	@ (800115c <HAL_RCC_OscConfig+0x4dc>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800115a:	e03a      	b.n	80011d2 <HAL_RCC_OscConfig+0x552>
 800115c:	44020c00 	.word	0x44020c00
 8001160:	20000000 	.word	0x20000000
 8001164:	44020800 	.word	0x44020800
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b85      	cmp	r3, #133	@ 0x85
 800116e:	d118      	bne.n	80011a2 <HAL_RCC_OscConfig+0x522>
 8001170:	4ba2      	ldr	r3, [pc, #648]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001176:	4aa1      	ldr	r2, [pc, #644]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001180:	4b9e      	ldr	r3, [pc, #632]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001186:	4a9d      	ldr	r2, [pc, #628]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001190:	4b9a      	ldr	r3, [pc, #616]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001196:	4a99      	ldr	r2, [pc, #612]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011a0:	e017      	b.n	80011d2 <HAL_RCC_OscConfig+0x552>
 80011a2:	4b96      	ldr	r3, [pc, #600]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011a8:	4a94      	ldr	r2, [pc, #592]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011b2:	4b92      	ldr	r3, [pc, #584]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b8:	4a90      	ldr	r2, [pc, #576]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011ba:	f023 0304 	bic.w	r3, r3, #4
 80011be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011c2:	4b8e      	ldr	r3, [pc, #568]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c8:	4a8c      	ldr	r2, [pc, #560]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d016      	beq.n	8001208 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011da:	f7ff f909 	bl	80003f0 <HAL_GetTick>
 80011de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff f905 	bl	80003f0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e175      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011f8:	4b80      	ldr	r3, [pc, #512]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80011fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0ed      	beq.n	80011e2 <HAL_RCC_OscConfig+0x562>
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001208:	f7ff f8f2 	bl	80003f0 <HAL_GetTick>
 800120c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800120e:	e00a      	b.n	8001226 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f7ff f8ee 	bl	80003f0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e15e      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001226:	4b75      	ldr	r3, [pc, #468]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1ed      	bne.n	8001210 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d036      	beq.n	80012ae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d019      	beq.n	800127c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001248:	4b6c      	ldr	r3, [pc, #432]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6b      	ldr	r2, [pc, #428]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800124e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff f8cc 	bl	80003f0 <HAL_GetTick>
 8001258:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800125c:	f7ff f8c8 	bl	80003f0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e13a      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800126e:	4b63      	ldr	r3, [pc, #396]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x5dc>
 800127a:	e018      	b.n	80012ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800127c:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a5e      	ldr	r2, [pc, #376]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff f8b2 	bl	80003f0 <HAL_GetTick>
 800128c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001290:	f7ff f8ae 	bl	80003f0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e120      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80012a2:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8115 	beq.w	80014e2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b18      	cmp	r3, #24
 80012bc:	f000 80af 	beq.w	800141e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	f040 8086 	bne.w	80013d6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80012ca:	4b4c      	ldr	r3, [pc, #304]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a4b      	ldr	r2, [pc, #300]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80012d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff f88b 	bl	80003f0 <HAL_GetTick>
 80012da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80012de:	f7ff f887 	bl	80003f0 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e0f9      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80012f0:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001304:	f023 0303 	bic.w	r3, r3, #3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001310:	0212      	lsls	r2, r2, #8
 8001312:	430a      	orrs	r2, r1
 8001314:	4939      	ldr	r1, [pc, #228]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	628b      	str	r3, [r1, #40]	@ 0x28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131e:	3b01      	subs	r3, #1
 8001320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001328:	3b01      	subs	r3, #1
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	b29b      	uxth	r3, r3
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001334:	3b01      	subs	r3, #1
 8001336:	041b      	lsls	r3, r3, #16
 8001338:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	3b01      	subs	r3, #1
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800134a:	492c      	ldr	r1, [pc, #176]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800134c:	4313      	orrs	r3, r2
 800134e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001356:	f023 0310 	bic.w	r3, r3, #16
 800135a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	4a26      	ldr	r2, [pc, #152]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136a:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001372:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	f023 020c 	bic.w	r2, r3, #12
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	491f      	ldr	r1, [pc, #124]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001388:	f023 0220 	bic.w	r2, r3, #32
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001390:	491a      	ldr	r1, [pc, #104]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001392:	4313      	orrs	r3, r2
 8001394:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80013a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff f81f 	bl	80003f0 <HAL_GetTick>
 80013b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80013b6:	f7ff f81b 	bl	80003f0 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e08d      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x736>
 80013d4:	e085      	b.n	80014e2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_RCC_OscConfig+0x77c>)
 80013dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff f805 	bl	80003f0 <HAL_GetTick>
 80013e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f801 	bl	80003f0 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d903      	bls.n	8001400 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e073      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
 80013fc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001400:	4b3a      	ldr	r3, [pc, #232]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800140c:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	4a36      	ldr	r2, [pc, #216]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 8001412:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	6293      	str	r3, [r2, #40]	@ 0x28
 800141c:	e061      	b.n	80014e2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800141e:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001424:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 8001426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001428:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142e:	2b01      	cmp	r3, #1
 8001430:	d031      	beq.n	8001496 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d12a      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d122      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d11a      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	0a5b      	lsrs	r3, r3, #9
 8001464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d111      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	0c1b      	lsrs	r3, r3, #16
 8001476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d108      	bne.n	8001496 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	0e1b      	lsrs	r3, r3, #24
 8001488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e024      	b.n	80014e4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d01a      	beq.n	80014e2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 80014b2:	f023 0310 	bic.w	r3, r3, #16
 80014b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7fe ff9a 	bl	80003f0 <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80014be:	bf00      	nop
 80014c0:	f7fe ff96 	bl	80003f0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d0f9      	beq.n	80014c0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_RCC_OscConfig+0x86c>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	44020c00 	.word	0x44020c00

080014f0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e19e      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b83      	ldr	r3, [pc, #524]	@ (8001714 <HAL_RCC_ClockConfig+0x224>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b80      	ldr	r3, [pc, #512]	@ (8001714 <HAL_RCC_ClockConfig+0x224>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 020f 	bic.w	r2, r3, #15
 800151a:	497e      	ldr	r1, [pc, #504]	@ (8001714 <HAL_RCC_ClockConfig+0x224>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b7c      	ldr	r3, [pc, #496]	@ (8001714 <HAL_RCC_ClockConfig+0x224>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e186      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	d012      	beq.n	8001566 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800154e:	429a      	cmp	r2, r3
 8001550:	d909      	bls.n	8001566 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001552:	4b71      	ldr	r3, [pc, #452]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	496d      	ldr	r1, [pc, #436]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001562:	4313      	orrs	r3, r2
 8001564:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001580:	429a      	cmp	r2, r3
 8001582:	d909      	bls.n	8001598 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4961      	ldr	r1, [pc, #388]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001594:	4313      	orrs	r3, r2
 8001596:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d010      	beq.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d908      	bls.n	80015c6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80015b4:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4955      	ldr	r1, [pc, #340]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	429a      	cmp	r2, r3
 80015e0:	d908      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80015e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	f023 020f 	bic.w	r2, r3, #15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	494a      	ldr	r1, [pc, #296]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8093 	beq.w	8001728 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800160a:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e113      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e107      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0fb      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0f3      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	492c      	ldr	r1, [pc, #176]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7fe fec0 	bl	80003f0 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7fe feb8 	bl	80003f0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0d7      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 0318 	and.w	r3, r3, #24
 800169a:	2b18      	cmp	r3, #24
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_ClockConfig+0x18c>
 800169e:	e043      	b.n	8001728 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7fe fea1 	bl	80003f0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0c0      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 0318 	and.w	r3, r3, #24
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
 80016cc:	e02c      	b.n	8001728 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d122      	bne.n	800171c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7fe fe8a 	bl	80003f0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0a9      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_RCC_ClockConfig+0x228>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0318 	and.w	r3, r3, #24
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d1ee      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x1e8>
 80016fa:	e015      	b.n	8001728 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7fe fe78 	bl	80003f0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d906      	bls.n	800171c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e097      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000
 8001718:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 0318 	and.w	r3, r3, #24
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e9      	bne.n	80016fc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b44      	ldr	r3, [pc, #272]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	429a      	cmp	r2, r3
 8001742:	d208      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001744:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 020f 	bic.w	r2, r3, #15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	493e      	ldr	r1, [pc, #248]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001752:	4313      	orrs	r3, r2
 8001754:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <HAL_RCC_ClockConfig+0x360>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d210      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <HAL_RCC_ClockConfig+0x360>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 020f 	bic.w	r2, r3, #15
 800176c:	4938      	ldr	r1, [pc, #224]	@ (8001850 <HAL_RCC_ClockConfig+0x360>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <HAL_RCC_ClockConfig+0x360>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e05d      	b.n	8001842 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d010      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800179e:	429a      	cmp	r2, r3
 80017a0:	d208      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4927      	ldr	r1, [pc, #156]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d012      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d209      	bcs.n	80017e6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	491a      	ldr	r1, [pc, #104]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d012      	beq.n	8001818 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001800:	429a      	cmp	r2, r3
 8001802:	d209      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	490e      	ldr	r1, [pc, #56]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001818:	f000 f822 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_RCC_ClockConfig+0x35c>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490b      	ldr	r1, [pc, #44]	@ (8001854 <HAL_RCC_ClockConfig+0x364>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_RCC_ClockConfig+0x368>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x36c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd50 	bl	80002dc <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001840:	7afb      	ldrb	r3, [r7, #11]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	44020c00 	.word	0x44020c00
 8001850:	40022000 	.word	0x40022000
 8001854:	080022e4 	.word	0x080022e4
 8001858:	20000024 	.word	0x20000024
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001866:	4b8c      	ldr	r3, [pc, #560]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0318 	and.w	r3, r3, #24
 800186e:	2b08      	cmp	r3, #8
 8001870:	d102      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001872:	4b8a      	ldr	r3, [pc, #552]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x23c>)
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e107      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001878:	4b87      	ldr	r3, [pc, #540]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f003 0318 	and.w	r3, r3, #24
 8001880:	2b00      	cmp	r3, #0
 8001882:	d112      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001884:	4b84      	ldr	r3, [pc, #528]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001890:	4b81      	ldr	r3, [pc, #516]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	4a81      	ldr	r2, [pc, #516]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x240>)
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e0f1      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80018a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x240>)
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e0ee      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0318 	and.w	r3, r3, #24
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b6:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x244>)
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e0e5      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b76      	ldr	r3, [pc, #472]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f003 0318 	and.w	r3, r3, #24
 80018c4:	2b18      	cmp	r3, #24
 80018c6:	f040 80dd 	bne.w	8001a84 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80018ca:	4b73      	ldr	r3, [pc, #460]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80018d4:	4b70      	ldr	r3, [pc, #448]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80018e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80018ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80b7 	beq.w	8001a7e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0xbe>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d056      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x16a>
 800191c:	e077      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800191e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02d      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800192a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	4a5a      	ldr	r2, [pc, #360]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001964:	ed97 6a02 	vldr	s12, [r7, #8]
 8001968:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8001aa8 <HAL_RCC_GetSysClockFreq+0x248>
 800196c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001970:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001978:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001984:	e065      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001990:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x24c>
 8001994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001998:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80019a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8001aa8 <HAL_RCC_GetSysClockFreq+0x248>
 80019b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80019b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80019b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80019c8:	e043      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001ab0 <HAL_RCC_GetSysClockFreq+0x250>
 80019d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80019ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80019f0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8001aa8 <HAL_RCC_GetSysClockFreq+0x248>
 80019f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80019f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80019fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001a0c:	e021      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a18:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ab4 <HAL_RCC_GetSysClockFreq+0x254>
 8001a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a30:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a34:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001aa8 <HAL_RCC_GetSysClockFreq+0x248>
 8001a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001a50:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	ee17 3a90 	vmov	r3, s15
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	e004      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e001      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001a86:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001a88:	69fb      	ldr	r3, [r7, #28]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	44020c00 	.word	0x44020c00
 8001a9c:	003d0900 	.word	0x003d0900
 8001aa0:	03d09000 	.word	0x03d09000
 8001aa4:	017d7840 	.word	0x017d7840
 8001aa8:	46000000 	.word	0x46000000
 8001aac:	4c742400 	.word	0x4c742400
 8001ab0:	4bbebc20 	.word	0x4bbebc20
 8001ab4:	4a742400 	.word	0x4a742400

08001ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001abc:	f7ff fed0 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001ac6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001aca:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001ace:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <HAL_RCC_GetHCLKFreq+0x34>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_RCC_GetHCLKFreq+0x34>)
 8001adc:	681b      	ldr	r3, [r3, #0]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	44020c00 	.word	0x44020c00
 8001ae8:	080022e4 	.word	0x080022e4
 8001aec:	20000024 	.word	0x20000024

08001af0 <Jump_To_Main_Application>:
static bool prvEraseOTA(void);

/* Private user code ---------------------------------------------------------*/

void Jump_To_Main_Application(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  /* Verify APP_START_ADDRESS contains expected initial SP */
  if (*(uint32_t*)APP_START_ADDRESS != 0x200A0000)
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <Jump_To_Main_Application+0x80>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <Jump_To_Main_Application+0x84>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d132      	bne.n	8001b66 <Jump_To_Main_Application+0x76>
  {
    /* Handle error: invalid address or corrupted application */
    return;
  }

  HAL_SuspendTick();
 8001b00:	f7fe fc82 	bl	8000408 <HAL_SuspendTick>
#if defined(HAL_ICACHE_MODULE_ENABLED)
  HAL_ICACHE_Disable();
#endif

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  uint32_t saved_flash_latency = __HAL_FLASH_GET_LATENCY();
 8001b04:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	607b      	str	r3, [r7, #4]
  __HAL_FLASH_SET_LATENCY(__HAL_FLASH_GET_LATENCY() + 2);
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 020f 	bic.w	r2, r3, #15
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3302      	adds	r3, #2
 8001b20:	4915      	ldr	r1, [pc, #84]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
  (void)__HAL_FLASH_GET_LATENCY();
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b28:	681b      	ldr	r3, [r3, #0]
#endif

  /* Jump to user application */
  JumpAddress = *(uint32_t*)(APP_START_ADDRESS + 4);
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <Jump_To_Main_Application+0x8c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <Jump_To_Main_Application+0x90>)
 8001b30:	6013      	str	r3, [r2, #0]
  JumpToApplication = (pFunction)JumpAddress;
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <Jump_To_Main_Application+0x90>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <Jump_To_Main_Application+0x94>)
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Initialize user application's Stack Pointer */
  __set_MSP(*(uint32_t*)APP_START_ADDRESS);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <Jump_To_Main_Application+0x80>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f383 8808 	msr	MSP, r3
}
 8001b48:	bf00      	nop

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  __HAL_FLASH_SET_LATENCY(saved_flash_latency);
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
  (void)__HAL_FLASH_GET_LATENCY();
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <Jump_To_Main_Application+0x88>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
#endif

  JumpToApplication();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <Jump_To_Main_Application+0x94>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4798      	blx	r3
 8001b64:	e000      	b.n	8001b68 <Jump_To_Main_Application+0x78>
    return;
 8001b66:	bf00      	nop
}
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08010000 	.word	0x08010000
 8001b74:	200a0000 	.word	0x200a0000
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	08010004 	.word	0x08010004
 8001b80:	2000004c 	.word	0x2000004c
 8001b84:	20000048 	.word	0x20000048

08001b88 <check_for_hota>:

bool check_for_hota(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
  bool xReseult = false;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_ICACHE_MODULE_ENABLED)
HAL_ICACHE_Disable();
#endif

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  uint32_t saved_flash_latency = __HAL_FLASH_GET_LATENCY();
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <check_for_hota+0x94>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	60bb      	str	r3, [r7, #8]
  __HAL_FLASH_SET_LATENCY(__HAL_FLASH_GET_LATENCY() + 2);
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <check_for_hota+0x94>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 020f 	bic.w	r2, r3, #15
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <check_for_hota+0x94>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	3302      	adds	r3, #2
 8001bae:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <check_for_hota+0x94>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <check_for_hota+0x94>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
#endif

  // Create a pointer to the HOTA_START_ADDRESS
  uint32_t *address_ptr = (uint32_t*) HOTA_START_ADDRESS;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <check_for_hota+0x98>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00d      	beq.n	8001be0 <check_for_hota+0x58>
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <check_for_hota+0x98>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <check_for_hota+0x52>
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <check_for_hota+0x98>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001bd8:	e004      	b.n	8001be4 <check_for_hota+0x5c>
 8001bda:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001bde:	e001      	b.n	8001be4 <check_for_hota+0x5c>
 8001be0:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001be4:	607b      	str	r3, [r7, #4]

  // Read the value at that address
  uint32_t value = *address_ptr;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	603b      	str	r3, [r7, #0]

  // Check if the value is different from 0xFFFFFFFF
  xReseult = (value != 0xFFFFFFFFU);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  __HAL_FLASH_SET_LATENCY(saved_flash_latency);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <check_for_hota+0x94>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 020f 	bic.w	r2, r3, #15
 8001c02:	4906      	ldr	r1, [pc, #24]	@ (8001c1c <check_for_hota+0x94>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <check_for_hota+0x94>)
 8001c0c:	681b      	ldr	r3, [r3, #0]

#if defined(HAL_ICACHE_MODULE_ENABLED)
HAL_ICACHE_Enable();
#endif

  return xReseult;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	08fff80c 	.word	0x08fff80c

08001c24 <copy_hota>:
uint8_t dst_buffer    [FLASH_SECTOR_SIZE];
#endif
uint8_t src_buffer    [FLASH_SECTOR_SIZE];

void copy_hota(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  uint32_t total_sectors = RESERVED_OTA_SECTORS;
 8001c2a:	2360      	movs	r3, #96	@ 0x60
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t dst_address = 0;     /* first APP sector address */
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t src_address = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]

#if (SWAP_APPLICATION_AND_OTA == 1)
  uint32_t dest_sector = RESERVED_BOOT_SECTORS; /* APP sectors start after bootloader sectors                */
 8001c36:	2308      	movs	r3, #8
 8001c38:	60fb      	str	r3, [r7, #12]
  uint32_t dest_bank   = FLASH_BANK_1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]

  uint32_t src_sector  = 0;                     /* HOTA sectors start at sector 0 in bank 1                  */
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  uint32_t src_bank    = FLASH_BANK_2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	603b      	str	r3, [r7, #0]
#if (SWAP_APPLICATION_AND_OTA == 0)
  prvEraseApplication();
#endif

  /* Swap sectors */
  for (uint32_t sector_idx = 0; sector_idx < total_sectors; sector_idx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e062      	b.n	8001d12 <copy_hota+0xee>
  {
    src_address = HOTA_START_ADDRESS + (sector_idx * FLASH_SECTOR_SIZE);
 8001c4c:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <copy_hota+0x10c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <copy_hota+0x50>
 8001c58:	4b35      	ldr	r3, [pc, #212]	@ (8001d30 <copy_hota+0x10c>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <copy_hota+0x4a>
 8001c60:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <copy_hota+0x10c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001c6c:	e004      	b.n	8001c78 <copy_hota+0x54>
 8001c6e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001c72:	e001      	b.n	8001c78 <copy_hota+0x54>
 8001c74:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	0352      	lsls	r2, r2, #13
 8001c7c:	4413      	add	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
    dst_address = APP_START_ADDRESS  + (sector_idx * FLASH_SECTOR_SIZE);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c86:	3308      	adds	r3, #8
 8001c88:	035b      	lsls	r3, r3, #13
 8001c8a:	617b      	str	r3, [r7, #20]

    /* Copy source sector (HOTA) to buffer */
    copy_from_flash_to_buffer(src_buffer, src_address, FLASH_SECTOR_SIZE);
 8001c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	4828      	ldr	r0, [pc, #160]	@ (8001d34 <copy_hota+0x110>)
 8001c94:	f000 f852 	bl	8001d3c <copy_from_flash_to_buffer>

#if (SWAP_APPLICATION_AND_OTA == 1)
    copy_from_flash_to_buffer(dst_buffer, dst_address, FLASH_SECTOR_SIZE);
 8001c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9c:	6979      	ldr	r1, [r7, #20]
 8001c9e:	4826      	ldr	r0, [pc, #152]	@ (8001d38 <copy_hota+0x114>)
 8001ca0:	f000 f84c 	bl	8001d3c <copy_from_flash_to_buffer>


    /* Erase destination sector before writing */
    if (!prvEraseSectors(dest_bank, 1, dest_sector + sector_idx))
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2101      	movs	r1, #1
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f000 f90a 	bl	8001ec8 <prvEraseSectors>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12d      	bne.n	8001d1c <copy_hota+0xf8>
    {
      return;
    }
#endif
    /* Write buffer to destination sector (APP) */
    if (!prvWriteToFlash(src_buffer, dst_address,FLASH_SECTOR_SIZE))
 8001cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc4:	6979      	ldr	r1, [r7, #20]
 8001cc6:	481b      	ldr	r0, [pc, #108]	@ (8001d34 <copy_hota+0x110>)
 8001cc8:	f000 f868 	bl	8001d9c <prvWriteToFlash>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d123      	bne.n	8001d20 <copy_hota+0xfc>
      return;
    }

#if (SWAP_APPLICATION_AND_OTA == 1)
    /* Erase source sector */
    if (!prvEraseSectors(src_bank, 1, src_sector + sector_idx))
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4413      	add	r3, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f000 f8f0 	bl	8001ec8 <prvEraseSectors>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f083 0301 	eor.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d117      	bne.n	8001d24 <copy_hota+0x100>
    {
      return;
    }


    if (!prvWriteToFlash(dst_buffer, src_address, FLASH_SECTOR_SIZE))
 8001cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf8:	6939      	ldr	r1, [r7, #16]
 8001cfa:	480f      	ldr	r0, [pc, #60]	@ (8001d38 <copy_hota+0x114>)
 8001cfc:	f000 f84e 	bl	8001d9c <prvWriteToFlash>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <copy_hota+0x104>
  for (uint32_t sector_idx = 0; sector_idx < total_sectors; sector_idx++)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d398      	bcc.n	8001c4c <copy_hota+0x28>
 8001d1a:	e006      	b.n	8001d2a <copy_hota+0x106>
      return;
 8001d1c:	bf00      	nop
 8001d1e:	e004      	b.n	8001d2a <copy_hota+0x106>
      return;
 8001d20:	bf00      	nop
 8001d22:	e002      	b.n	8001d2a <copy_hota+0x106>
      return;
 8001d24:	bf00      	nop
 8001d26:	e000      	b.n	8001d2a <copy_hota+0x106>
    {
      return;
 8001d28:	bf00      	nop
  }

#if (SWAP_APPLICATION_AND_OTA == 0)
  prvEraseOTA();
#endif
}
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	08fff80c 	.word	0x08fff80c
 8001d34:	20002050 	.word	0x20002050
 8001d38:	20000050 	.word	0x20000050

08001d3c <copy_from_flash_to_buffer>:
 * @param dest Pointer to the destination buffer in RAM.
 * @param src_flash_addr Source address in flash memory.
 * @param size Number of bytes to copy.
 */
static void copy_from_flash_to_buffer(uint8_t *dest, const uint32_t src_flash_addr, uint32_t size)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
#if defined(HAL_ICACHE_MODULE_ENABLED)
HAL_ICACHE_Disable();
#endif

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  uint32_t saved_flash_latency = __HAL_FLASH_GET_LATENCY();
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	617b      	str	r3, [r7, #20]
  __HAL_FLASH_SET_LATENCY(__HAL_FLASH_GET_LATENCY() + 2);
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3302      	adds	r3, #2
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
#endif

  const uint8_t *src_ptr = (const uint8_t*) src_flash_addr;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	613b      	str	r3, [r7, #16]
  memcpy(dest, src_ptr, size);
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6939      	ldr	r1, [r7, #16]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa9a 	bl	80022b0 <memcpy>

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  __HAL_FLASH_SET_LATENCY(saved_flash_latency);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 020f 	bic.w	r2, r3, #15
 8001d84:	4904      	ldr	r1, [pc, #16]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <copy_from_flash_to_buffer+0x5c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
#endif

#if defined(HAL_ICACHE_MODULE_ENABLED)
HAL_ICACHE_Enable();
#endif
}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000

08001d9c <prvWriteToFlash>:

static bool prvWriteToFlash(uint8_t *pSource, uint32_t destination,  uint32_t ulLength)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b08d      	sub	sp, #52	@ 0x34
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t i = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t quadWord[16] = { 0 };
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  uint32_t numQuadWords = NUM_QUAD_WORDS(ulLength);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t remainingBytes = NUM_REMAINING_BYTES(ulLength);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	623b      	str	r3, [r7, #32]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8001dce:	f7fe fd07 	bl	80007e0 <HAL_FLASH_Unlock>

  for (i = 0U; i < numQuadWords; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dd6:	e02f      	b.n	8001e38 <prvWriteToFlash+0x9c>
    vPetWatchdog();

    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     * be done by word */

    memcpy(quadWord, pSource, 16UL);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f107 0410 	add.w	r4, r7, #16
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_QUADWORD, destination, (uint32_t) quadWord);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	461a      	mov	r2, r3
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7fe fc7d 	bl	80006f0 <HAL_FLASH_Program>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (status == HAL_OK)
 8001dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10c      	bne.n	8001e1e <prvWriteToFlash+0x82>
    {
      /* Check the written value */
      if (memcmp((void*) destination, quadWord, 16UL) != 0)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f107 0110 	add.w	r1, r7, #16
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fa12 	bl	8002236 <memcmp>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <prvWriteToFlash+0x82>
      {
        /* Flash content doesn't match SRAM content */
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    if (status == HAL_OK)
 8001e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <prvWriteToFlash+0xa6>
    {
      /* Increment FLASH destination address and the source address. */
      destination += 16UL;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	60bb      	str	r3, [r7, #8]
      pSource += 16UL;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3310      	adds	r3, #16
 8001e30:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < numQuadWords; i++)
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	3301      	adds	r3, #1
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3cb      	bcc.n	8001dd8 <prvWriteToFlash+0x3c>
 8001e40:	e000      	b.n	8001e44 <prvWriteToFlash+0xa8>
    }
    else
    {
      break;
 8001e42:	bf00      	nop
    }
  }

  if (status == HAL_OK)
 8001e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12f      	bne.n	8001eac <prvWriteToFlash+0x110>
  {
    if (remainingBytes > 0)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02c      	beq.n	8001eac <prvWriteToFlash+0x110>
    {
      memcpy(quadWord, pSource, remainingBytes);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fa28 	bl	80022b0 <memcpy>
      memset((quadWord + remainingBytes), 0xFF, (16UL - remainingBytes));
 8001e60:	f107 0210 	add.w	r2, r7, #16
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	18d0      	adds	r0, r2, r3
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f1c3 0310 	rsb	r3, r3, #16
 8001e6e:	461a      	mov	r2, r3
 8001e70:	21ff      	movs	r1, #255	@ 0xff
 8001e72:	f000 f9f0 	bl	8002256 <memset>

      status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_QUADWORD, destination, (uint32_t) quadWord);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7fe fc36 	bl	80006f0 <HAL_FLASH_Program>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      if (status == HAL_OK)
 8001e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <prvWriteToFlash+0x110>
      {
        /* Check the written value */
        if (memcmp((void*) destination, quadWord, 16UL) != 0)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f107 0110 	add.w	r1, r7, #16
 8001e98:	2210      	movs	r2, #16
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f9cb 	bl	8002236 <memcmp>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <prvWriteToFlash+0x110>
        {
          /* Flash content doesn't match SRAM content */
          status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
   *  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8001eac:	f7fe fcbe 	bl	800082c <HAL_FLASH_Lock>

  return status == HAL_OK;
 8001eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3734      	adds	r7, #52	@ 0x34
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
	...

08001ec8 <prvEraseSectors>:

static bool prvEraseSectors(uint32_t Nb_Bank, uint32_t Nb_Sectors, uint32_t StartSector)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  bool xResult = true;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if defined(HAL_ICACHE_MODULE_ENABLED)
    HAL_ICACHE_Disable();
    #endif

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  uint32_t saved_flash_latency = __HAL_FLASH_GET_LATENCY();
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __HAL_FLASH_SET_LATENCY(__HAL_FLASH_GET_LATENCY() + 2);
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 020f 	bic.w	r2, r3, #15
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	491c      	ldr	r1, [pc, #112]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
#endif

  if (HAL_FLASH_Unlock() == HAL_OK)
 8001f00:	f7fe fc6e 	bl	80007e0 <HAL_FLASH_Unlock>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11a      	bne.n	8001f40 <prvEraseSectors+0x78>
  {
    uint32_t pageError = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    FLASH_EraseInitTypeDef pEraseInit;
#if defined(STM32H5)
    pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	617b      	str	r3, [r7, #20]
    pEraseInit.Banks     = Nb_Bank;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
    pEraseInit.NbSectors = Nb_Sectors;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	623b      	str	r3, [r7, #32]
    pEraseInit.Sector    = StartSector;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61fb      	str	r3, [r7, #28]
    pEraseInit.Banks     = FLASH_BANK_1;
    pEraseInit.NbPages   = RESERVED_OTA_SECTORS;
    pEraseInit.Page      = RESERVED_BOOT_SECTORS;
#endif

    if (HAL_FLASHEx_Erase(&pEraseInit, &pageError) != HAL_OK)
 8001f1e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fda5 	bl	8000a78 <HAL_FLASHEx_Erase>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <prvEraseSectors+0x72>
    {
      PRINTF_ERROR("Failed to erase the flash bank, errorCode = %u, pageError = %u.", HAL_FLASH_GetError(), pageError);
      xResult = false;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (void) HAL_FLASH_Lock();
 8001f3a:	f7fe fc77 	bl	800082c <HAL_FLASH_Lock>
 8001f3e:	e002      	b.n	8001f46 <prvEraseSectors+0x7e>
  }
  else
  {
    PRINTF_ERROR("Failed to lock flash for erase, errorCode = %u.", HAL_FLASH_GetError());
    xResult = false;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

#if defined(__STM32H5xx_HAL_H) || defined(STM32L5xx_HAL_H)
  __HAL_FLASH_SET_LATENCY(saved_flash_latency);
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4906      	ldr	r1, [pc, #24]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
  (void) __HAL_FLASH_GET_LATENCY();
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <prvEraseSectors+0xa0>)
 8001f58:	681b      	ldr	r3, [r3, #0]

#if defined(HAL_ICACHE_MODULE_ENABLED)
    HAL_ICACHE_Enable();
    #endif

  return xResult;
 8001f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3730      	adds	r7, #48	@ 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f70:	f7fe f98c 	bl	800028c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f74:	f000 f80c 	bl	8001f90 <SystemClock_Config>
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
#endif

  if(check_for_hota())
 8001f78:	f7ff fe06 	bl	8001b88 <check_for_hota>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <main+0x1a>
  {
    PRINTF_DEBUG("\r\nNew HOTA present\r\n");
    copy_hota();
 8001f82:	f7ff fe4f 	bl	8001c24 <copy_hota>

#if  DEBUG_LEVEL
  HAL_Delay(5);
#endif

  Jump_To_Main_Application();
 8001f86:	f7ff fdb3 	bl	8001af0 <Jump_To_Main_Application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <main+0x1e>
	...

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09c      	sub	sp, #112	@ 0x70
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2250      	movs	r2, #80	@ 0x50
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f959 	bl	8002256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <SystemClock_Config+0xdc>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	@ (800206c <SystemClock_Config+0xdc>)
 8001fbc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001fc0:	6113      	str	r3, [r2, #16]
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <SystemClock_Config+0xdc>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001fce:	bf00      	nop
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <SystemClock_Config+0xdc>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d1f9      	bne.n	8001fd0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fea:	2302      	movs	r3, #2
 8001fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8001ff6:	237d      	movs	r3, #125	@ 0x7d
 8001ff8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002002:	2302      	movs	r3, #2
 8002004:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002006:	2308      	movs	r3, #8
 8002008:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800200a:	2300      	movs	r3, #0
 800200c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fe32 	bl	8000c80 <HAL_RCC_OscConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002022:	f000 f827 	bl	8002074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002026:	231f      	movs	r3, #31
 8002028:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202a:	2303      	movs	r3, #3
 800202c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2105      	movs	r1, #5
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fa53 	bl	80014f0 <HAL_RCC_ClockConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002050:	f000 f810 	bl	8002074 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <SystemClock_Config+0xe0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <SystemClock_Config+0xe0>)
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	3770      	adds	r7, #112	@ 0x70
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	44020800 	.word	0x44020800
 8002070:	40022000 	.word	0x40022000

08002074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <Error_Handler+0x8>

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	bf00      	nop
 800209c:	e7fd      	b.n	800209a <HardFault_Handler+0x4>

0800209e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	bf00      	nop
 80020ac:	e7fd      	b.n	80020aa <BusFault_Handler+0x4>

080020ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f7fe f970 	bl	80003c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020f2:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <SystemInit+0xdc>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	4a33      	ldr	r2, [pc, #204]	@ (80021c8 <SystemInit+0xdc>)
 80020fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002102:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <SystemInit+0xe0>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002108:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <SystemInit+0xe0>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800210e:	4b2f      	ldr	r3, [pc, #188]	@ (80021cc <SystemInit+0xe0>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002114:	4b2d      	ldr	r3, [pc, #180]	@ (80021cc <SystemInit+0xe0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	492c      	ldr	r1, [pc, #176]	@ (80021cc <SystemInit+0xe0>)
 800211a:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <SystemInit+0xe4>)
 800211c:	4013      	ands	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002120:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <SystemInit+0xe0>)
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002126:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <SystemInit+0xe0>)
 8002128:	2200      	movs	r2, #0
 800212a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800212c:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <SystemInit+0xe0>)
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002132:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <SystemInit+0xe0>)
 8002134:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <SystemInit+0xe8>)
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002138:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <SystemInit+0xe0>)
 800213a:	2200      	movs	r2, #0
 800213c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800213e:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <SystemInit+0xe0>)
 8002140:	4a24      	ldr	r2, [pc, #144]	@ (80021d4 <SystemInit+0xe8>)
 8002142:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <SystemInit+0xe0>)
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <SystemInit+0xe0>)
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <SystemInit+0xe8>)
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <SystemInit+0xe0>)
 8002152:	2200      	movs	r2, #0
 8002154:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002156:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <SystemInit+0xe0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1c      	ldr	r2, [pc, #112]	@ (80021cc <SystemInit+0xe0>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002160:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <SystemInit+0xe0>)
 8002164:	2200      	movs	r2, #0
 8002166:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <SystemInit+0xdc>)
 800216a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800216e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <SystemInit+0xec>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002178:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002180:	d003      	beq.n	800218a <SystemInit+0x9e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002188:	d117      	bne.n	80021ba <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <SystemInit+0xec>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <SystemInit+0xec>)
 8002198:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <SystemInit+0xf0>)
 800219a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <SystemInit+0xec>)
 800219e:	4a10      	ldr	r2, [pc, #64]	@ (80021e0 <SystemInit+0xf4>)
 80021a0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <SystemInit+0xec>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <SystemInit+0xec>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <SystemInit+0xec>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <SystemInit+0xec>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	61d3      	str	r3, [r2, #28]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	44020c00 	.word	0x44020c00
 80021d0:	eae2eae3 	.word	0xeae2eae3
 80021d4:	01010280 	.word	0x01010280
 80021d8:	40022000 	.word	0x40022000
 80021dc:	08192a3b 	.word	0x08192a3b
 80021e0:	4c5d6e7f 	.word	0x4c5d6e7f

080021e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021e4:	480d      	ldr	r0, [pc, #52]	@ (800221c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021e8:	f7ff ff80 	bl	80020ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopForever+0xe>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopForever+0x16>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002212:	f000 f829 	bl	8002268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002216:	f7ff fea9 	bl	8001f6c <main>

0800221a <LoopForever>:

LoopForever:
    b LoopForever
 800221a:	e7fe      	b.n	800221a <LoopForever>
  ldr   r0, =_estack
 800221c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002228:	080022fc 	.word	0x080022fc
  ldr r2, =_sbss
 800222c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002230:	20004050 	.word	0x20004050

08002234 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_IRQHandler>

08002236 <memcmp>:
 8002236:	3901      	subs	r1, #1
 8002238:	4402      	add	r2, r0
 800223a:	b510      	push	{r4, lr}
 800223c:	4290      	cmp	r0, r2
 800223e:	d101      	bne.n	8002244 <memcmp+0xe>
 8002240:	2000      	movs	r0, #0
 8002242:	e005      	b.n	8002250 <memcmp+0x1a>
 8002244:	7803      	ldrb	r3, [r0, #0]
 8002246:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800224a:	42a3      	cmp	r3, r4
 800224c:	d001      	beq.n	8002252 <memcmp+0x1c>
 800224e:	1b18      	subs	r0, r3, r4
 8002250:	bd10      	pop	{r4, pc}
 8002252:	3001      	adds	r0, #1
 8002254:	e7f2      	b.n	800223c <memcmp+0x6>

08002256 <memset>:
 8002256:	4402      	add	r2, r0
 8002258:	4603      	mov	r3, r0
 800225a:	4293      	cmp	r3, r2
 800225c:	d100      	bne.n	8002260 <memset+0xa>
 800225e:	4770      	bx	lr
 8002260:	f803 1b01 	strb.w	r1, [r3], #1
 8002264:	e7f9      	b.n	800225a <memset+0x4>
	...

08002268 <__libc_init_array>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4d0d      	ldr	r5, [pc, #52]	@ (80022a0 <__libc_init_array+0x38>)
 800226c:	2600      	movs	r6, #0
 800226e:	4c0d      	ldr	r4, [pc, #52]	@ (80022a4 <__libc_init_array+0x3c>)
 8002270:	1b64      	subs	r4, r4, r5
 8002272:	10a4      	asrs	r4, r4, #2
 8002274:	42a6      	cmp	r6, r4
 8002276:	d109      	bne.n	800228c <__libc_init_array+0x24>
 8002278:	4d0b      	ldr	r5, [pc, #44]	@ (80022a8 <__libc_init_array+0x40>)
 800227a:	2600      	movs	r6, #0
 800227c:	4c0b      	ldr	r4, [pc, #44]	@ (80022ac <__libc_init_array+0x44>)
 800227e:	f000 f825 	bl	80022cc <_init>
 8002282:	1b64      	subs	r4, r4, r5
 8002284:	10a4      	asrs	r4, r4, #2
 8002286:	42a6      	cmp	r6, r4
 8002288:	d105      	bne.n	8002296 <__libc_init_array+0x2e>
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002290:	3601      	adds	r6, #1
 8002292:	4798      	blx	r3
 8002294:	e7ee      	b.n	8002274 <__libc_init_array+0xc>
 8002296:	f855 3b04 	ldr.w	r3, [r5], #4
 800229a:	3601      	adds	r6, #1
 800229c:	4798      	blx	r3
 800229e:	e7f2      	b.n	8002286 <__libc_init_array+0x1e>
 80022a0:	080022f4 	.word	0x080022f4
 80022a4:	080022f4 	.word	0x080022f4
 80022a8:	080022f4 	.word	0x080022f4
 80022ac:	080022f8 	.word	0x080022f8

080022b0 <memcpy>:
 80022b0:	440a      	add	r2, r1
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	4291      	cmp	r1, r2
 80022b6:	d100      	bne.n	80022ba <memcpy+0xa>
 80022b8:	4770      	bx	lr
 80022ba:	b510      	push	{r4, lr}
 80022bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022c0:	4291      	cmp	r1, r2
 80022c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022c6:	d1f9      	bne.n	80022bc <memcpy+0xc>
 80022c8:	bd10      	pop	{r4, pc}
	...

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
